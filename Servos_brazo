#include <ServoEasing.hpp>
#include <util/atomic.h>
#include <Servo.h>

// ——— Brazo robótico ———
ServoEasing servoRotacion;    // Pin 4
ServoEasing servoBaseIzq;     // Pin 6
ServoEasing servoBaseDer;     // Pin 5 (inverso de BaseIzq)
ServoEasing servoHombro;      // Pin 7
ServoEasing servoMuneca;      // Pin 8
ServoEasing servoGarra;       // Pin 9

// ——— Motores DC con encoder ———
#define NMOTORS 2
const int ENCA[NMOTORS] = {2, 3};
const int ENCB[NMOTORS] = {27, 26};
const int PWM[NMOTORS]  = {12, 13};
const int IN1[NMOTORS]   = {23, 24};
const int IN2[NMOTORS]   = {22, 25};

// Clase SimplePID
class SimplePID {
  private:
    float kp, kd, ki, umax;
    float eprev, eintegral;

  public:
    SimplePID() : kp(1), kd(0), ki(0), umax(255), eprev(0.0), eintegral(0.0) {}

    void setParams(float kpIn, float kdIn, float kiIn, float umaxIn) {
      kp = kpIn; kd = kdIn; ki = kiIn; umax = umaxIn;
    }

    void evalu(int value, int target, float deltaT, int pwm, int in1, int in2) {
      int e = target - value;
      float dedt = (e - eprev) / deltaT;
      eintegral += e * deltaT;
      if (eintegral > 50) eintegral = 50;
      float u = kp * e + kd * dedt + ki * eintegral;

      int pwr = (int)fabs(u);
      if (pwr > umax) pwr = umax;
      if(abs(pwr)<=25) pwr = 0;
      int dir = (u < 0) ? -1 : 1;

      analogWrite(pwm, pwr);
      digitalWrite(in1, dir == 1);
      digitalWrite(in2, dir == -1);
      eprev = e;
    }

} pid[NMOTORS];

volatile int pos_i[NMOTORS] = {0};
volatile float velocity_i[NMOTORS] = {0};
volatile long prevT_i[NMOTORS] = {0};
long prevT = 0;

// ——— Buffer de velocidad media ———
#define N 5
float velBuffer[N] = {0};
float velBuffer2[N] = {0};
int bufferIndex = 0;

// ——— Servo de timón ———
Servo myservo;
float timon = 90, lastTimon = 90;
float vt_A = 0, vt_B = 0;

void setup() {
  Serial.begin(115200);

  // Inicializa servos brazo
  servoRotacion.attach(4);
  servoBaseIzq .attach(6);
  servoBaseDer .attach(5);
  servoHombro  .attach(7);
  servoMuneca  .attach(8);
  servoGarra   .attach(9);

  // Velocidades de easing
  servoRotacion.setSpeed(40);
  servoBaseIzq .setSpeed(30);
  servoBaseDer .setSpeed(30);
  servoHombro  .setSpeed(30);
  servoMuneca  .setSpeed(30);
  servoGarra   .setSpeed(40);

  // Posiciones iniciales (ejemplo)
  servoRotacion.startEaseTo(90);
  servoBaseIzq .startEaseTo(0);
  servoBaseDer .startEaseTo(180);
  servoHombro  .startEaseTo(0);
  servoMuneca  .startEaseTo(100);
  servoGarra   .startEaseTo(0);

  // Configura pines de motores
  for (int k = 0; k < NMOTORS; k++) {
    pinMode(ENCA[k], INPUT);
    pinMode(ENCB[k], INPUT);
    pinMode(PWM[k], OUTPUT);
    pinMode(IN1[k], OUTPUT);
    pinMode(IN2[k], OUTPUT);
  }
  attachInterrupt(digitalPinToInterrupt(ENCA[0]), readEncoder<0>, RISING);
  attachInterrupt(digitalPinToInterrupt(ENCA[1]), readEncoder<1>, RISING);

  pid[0].setParams(0.95, 0.045, 15.0, 255);
  pid[1].setParams(0.95, 0.045, 15.0, 255);

  // Servo de timón
  myservo.attach(11);
  myservo.write(timon);
}

void loop() {
  static long prevLoopT = 0;
  long currT = micros();

  // — Lectura Serial: vtA,vtB,timon,rot,base,hombro,muneca,garra
  if (Serial.available() > 0) {
    String s = Serial.readStringUntil('\n');
    s.trim();
    int c1 = s.indexOf(','), c2 = s.indexOf(',', c1+1),
        c3 = s.indexOf(',', c2+1), c4 = s.indexOf(',', c3+1),
        c5 = s.indexOf(',', c4+1), c6 = s.indexOf(',', c5+1),
        c7 = s.indexOf(',', c6+1);
    if (c1!=-1 && c2!=-1 && c3!=-1 && c4!=-1 && c5!=-1 && c6!=-1 && c7!=-1) {
      vt_A   = s.substring(0, c1).toFloat();
      vt_B   = s.substring(c1+1, c2).toFloat();
      timon  = s.substring(c2+1, c3).toFloat();
      int angRot    = s.substring(c3+1, c4).toInt();
      int angBase   = s.substring(c4+1, c5).toInt();
      int angHombro = s.substring(c5+1, c6).toInt();
      int angMuneca = s.substring(c6+1, c7).toInt();
      int angGarra  = s.substring(c7+1).toInt();

      // Servo timón
      if (timon != lastTimon) {
        myservo.write(timon);
        lastTimon = timon;
      }
      // Comprueba rangos y aplica easing al brazo
      if (angRot>=0 && angRot<=180 &&
          angBase>=0&&angBase<=180 &&
          angHombro>=0&&angHombro<=180 &&
          angMuneca>=0&&angMuneca<=180 &&
          angGarra>=0&&angGarra<=180) {

        servoRotacion.setSpeed(40);
        servoBaseIzq .setSpeed(30);
        servoBaseDer .setSpeed(30);
        servoHombro  .setSpeed(30);
        servoMuneca  .setSpeed(30);
        servoGarra   .setSpeed(40);

        servoRotacion.startEaseTo(angRot);
        servoBaseIzq .startEaseTo(angBase);
        servoBaseDer .startEaseTo(180 - angBase);
        servoHombro  .startEaseTo(angHombro);
        servoMuneca  .startEaseTo(angMuneca);
        servoGarra   .startEaseTo(angGarra);
      } else {
        Serial.println("Error: ángulos de brazo fuera de rango");
      }
    } else {
      Serial.println("Formato inválido. Usa vtA,vtB,timon,rot,base,hombro,muneca,garra");
    }
  }

  // Actualiza todos los servos easing
  updateAllServos();

  // — Control de motores cada 20 ms
    // Procesamos los motores
  if (currT - prevLoopT >= 20000) {
    prevLoopT = currT;

    int pos[NMOTORS] = {0};
    float velocity[NMOTORS] = {0};

    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
      for (int k = 0; k < NMOTORS; k++) {
        pos[k] = pos_i[k];
        velocity[k] = velocity_i[k];
      }
    }

    if (currT - prevT_i[0] > 20000) velocity[0] = 0;
    if (currT - prevT_i[1] > 20000) velocity[1] = 0;

    float deltaT = (currT - prevT) / 1.0e6;
    prevT = currT;

    float v[NMOTORS];
    for (int k = 0; k < NMOTORS; k++) {
      v[k] = velocity[k] / 80.0 * 60.0;
    }

    velBuffer[bufferIndex] = v[0];
    velBuffer2[bufferIndex] = v[1];
    bufferIndex = (bufferIndex + 1) % N;

    float avgVelocity[NMOTORS] = {0};
    for (int i = 0; i < N; i++) {
      avgVelocity[0] += velBuffer[i];
      avgVelocity[1] += velBuffer2[i];
    }
    avgVelocity[0] /= N;
    avgVelocity[1] /= N;

    pid[0].evalu(avgVelocity[0], vt_A, deltaT, PWM[0], IN1[0], IN2[0]);
    pid[1].evalu(avgVelocity[1], vt_B, deltaT, PWM[1], IN1[1], IN2[1]);

    // Enviar datos de velocidad y valores de vt a serial para monitoreo
    Serial.print(timon);
    Serial.print(",");
    Serial.print(vt_A);
    Serial.print(",");
    Serial.print(avgVelocity[0]);
    Serial.print(",");
    Serial.print(vt_B);
    Serial.print(",");
    Serial.println(avgVelocity[1]);

    delay(10);
  }
}

// ——— ISR para encoders ———
template <int j>
void readEncoder() {
  int b = digitalRead(ENCB[j]);
  pos_i[j] += (b > 0) ? 1 : -1;
  long now = micros();
  float dt = (now - prevT_i[j]) / 1e6;
  int dir = (digitalRead(ENCB[j]) == HIGH) ? 1 : -1;
  velocity_i[j] = dir * (1.0 / dt);
  prevT_i[j]   = now;
}
